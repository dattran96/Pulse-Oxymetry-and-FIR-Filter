//Verilog HDL for "HDL_Lab_10", "FIR_Filter" "functional"
module FIR_Filter_Optimized(
  input CLK_Filter,
  input fast_clk,
  input rst_n,
  input wire[7:0] ADC_Value,
  output reg[19:0] Out_Filtered);

// parameter N = 4;
wire signed[8:0] coeffs[21:0];

//
reg [15:0] previous_Value[21:0];

reg full_flag;

reg flag_CLK_Filter;

// define multiplier


assign coeffs[0]=2;
assign coeffs[1]=10;
assign coeffs[2]=16;
assign coeffs[3]=28;
assign coeffs[4]=43;
assign coeffs[5]=60;
assign coeffs[6]=78;
assign coeffs[7]=95;
assign coeffs[8]=111;
assign coeffs[9]=122;
assign coeffs[10]= 128;
assign coeffs[11]=128;
assign coeffs[12]=122;
assign coeffs[13]=111;
assign coeffs[14]=95;
assign coeffs[15]=78;
assign coeffs[16]=60;
assign coeffs[17]=43;
assign coeffs[18]=28;
assign coeffs[19]=16;
assign coeffs[20]=10;
assign coeffs[21]= 2;


// Accumulator
reg[19:0] accu;

// Define pointers

// Coefficient Pointer
reg[4:0] coeff_Pointer;

// Temporary pointers

reg[4:0] temp_Pointer;

// Next Pointer to read coefficient
reg[4:0] nxt_Pointer;
reg signal_coe_on;
reg signal_fullflag;

reg reset_accu;

assign full = (temp_Pointer -1 == coeff_Pointer ) || (temp_Pointer == 0 && coeff_Pointer == 21);

always @(posedge fast_clk)
begin

	if(full)
		signal_fullflag = 1;
	if(reset_accu==1)
		accu =0;
		
	// If Pointer has done a cycle
	if(full_flag)
			
	accu = accu;			// do not change accu value

	if(!full_flag)
		begin	
			accu = accu + coeffs[coeff_Pointer] * previous_Value[coeff_Pointer];
			signal_coe_on = 1;
			 //
			
			//
		end
end


always @(posedge CLK_Filter or posedge rst_n)
begin
    if(rst_n)
    begin
	reset_accu =1;
	

	coeff_Pointer <= 0;
	temp_Pointer <= 0;
	nxt_Pointer <= 1;

	previous_Value[21]     <= 0;
        previous_Value[20]     <= 0;
	previous_Value[19]     <= 0;
        previous_Value[18]     <= 0;
	previous_Value[17]     <= 0;
        previous_Value[16]     <= 0;
	previous_Value[15]     <= 0;
        previous_Value[14]     <= 0;
       	previous_Value[13]     <= 0;
        previous_Value[12]     <= 0;
	previous_Value[11]     <= 0;
        previous_Value[10]     <= 0;
       	previous_Value[9]     <= 0;
        previous_Value[8]     <= 0;
	previous_Value[7]     <= 0;
        previous_Value[6]     <= 0;
       	previous_Value[5]     <= 0;
        previous_Value[4]     <= 0;
	previous_Value[3]     <= 0;
        previous_Value[2]     <= 0;
       	previous_Value[1]     <= 0;
        previous_Value[0]     <= 0;
	
        Out_Filtered    <= 0;
	full_flag <= 0;
	
    end

    else 
    begin
	if(signal_coe_on==1)
	begin
	coeff_Pointer <= nxt_Pointer;
			if(nxt_Pointer == 21)
				nxt_Pointer <= 0;
			else
				nxt_Pointer <= nxt_Pointer + 1;
	signal_coe_on =0;
	end
	
	if(signal_fullflag==1)
	begin
	full_flag <= 1; //
	signal_fullflag = 0;
	end
	// Shift every value to the next register place
	previous_Value[21]     <= previous_Value[20];
       	previous_Value[20]     <= previous_Value[19];
	previous_Value[19]     <= previous_Value[18];
       	previous_Value[18]     <= previous_Value[17];
       	previous_Value[17]     <= previous_Value[16];
       	previous_Value[16]     <= previous_Value[15];
	previous_Value[15]     <= previous_Value[14];
       	previous_Value[14]     <= previous_Value[13];
        previous_Value[13]     <= previous_Value[12];
        previous_Value[12]     <= previous_Value[11];
	previous_Value[11]     <= previous_Value[10];
        previous_Value[10]     <= previous_Value[9];
        previous_Value[9]     <= previous_Value[8];
        previous_Value[8]     <= previous_Value[7];
	previous_Value[7]     <= previous_Value[6];
        previous_Value[6]     <= previous_Value[5];
        previous_Value[5]     <= previous_Value[4];
        previous_Value[4]     <= previous_Value[3];
        previous_Value[3]     <= previous_Value[2];
        previous_Value[2]     <= previous_Value[1];
        previous_Value[1]     <= previous_Value[0];
       	previous_Value[0]     <= ADC_Value;

	Out_Filtered <= accu;
	reset_accu = 1;

	full_flag <= 0;
	flag_CLK_Filter <= 1;

	if(!full_flag)
	begin	
		coeff_Pointer <= 0;
		temp_Pointer <= 0;
		nxt_Pointer <= 1;
	end

	if(full_flag)
	begin		
						// increase all Pointer

		if(temp_Pointer == 21)
		begin

			temp_Pointer <= 0;
			coeff_Pointer <= 1;	
			nxt_Pointer <= 2;
		end

		else if(temp_Pointer == 20)

		begin

			temp_Pointer <= temp_Pointer + 1;
			coeff_Pointer <= 0;	
			nxt_Pointer <= 1;
		end


		else
		begin
			temp_Pointer <= temp_Pointer + 1;	
			coeff_Pointer <= temp_Pointer+1;
			nxt_Pointer <= temp_Pointer + 2;
		end
	end

				
				// Set flags

					
   end
end
endmodule





