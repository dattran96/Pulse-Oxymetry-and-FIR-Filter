//Verilog HDL for "HDL_Lab_10", "FIR_Filter" "functional"

module FIR_Filter_RED(
  input CLK_Filter,
  input rst_n,
  input wire[7:0] ADC_Value,
  output reg[19:0] Out_Filtered);

// parameter N = 4;
wire signed[8:0] coeffs[10:0];

// Accumulator
reg[19:0] accu;

// Pointer for reading the right coefficients
reg [4:0] coeff_Pointer;

// Temporary Pointer
reg [4:0] temp_Pointer;

// Next Pointer to read coefficient
reg [4:0] nxt_Pointer;

reg forward;

reg backwards;




// define multiplier


// FIFO
reg [19:0] product[21:0];

assign coeffs[0]=2;
assign coeffs[1]=10;
assign coeffs[2]=16;
assign coeffs[3]=28;
assign coeffs[4]=43;
assign coeffs[5]=60;
assign coeffs[6]=78;
assign coeffs[7]=95;
assign coeffs[8]=111;
assign coeffs[9]=122;
assign coeffs[10]= 128;


assign full = (temp_Pointer == nxt_Pointer);



/*genvar i;

generate
for (i=0; i<N; i=i+1)
    begin: mult
        multiplier mult1(
          .dataa(coeffs[i]),		// h[k]
          .datab(holderBefore[i]),	// x[n-k]
          .result(toAdd[i]));		// temp_y[k]
    end
endgenerate
*/


always @(posedge CLK_Filter or posedge rst_n)
begin
    if(rst_n)
        begin
            
	coeff_Pointer <= 0;
	temp_Pointer  <= 0;
	nxt_Pointer <= 1;
	accu = 0;
        Out_Filtered    <= 0;
	forward = 1;
	backwards =0;


	product[0] = 0;
	product[1] = 0;
	product[2] = 0;
	product[3] = 0;
	product[4] = 0;
	product[5] = 0;
	product[6] = 0;
	product[7] = 0;
	product[8] = 0;
	product[9] = 0;
	product[10] = 0;
	product[11] = 0;
	product[12] = 0;
	product[13] = 0;
	product[14] = 0;
	product[15] = 0;
	product[16] = 0;
	product[17] = 0;
	product[18] = 0;
	product[19] = 0;
	product[20] = 0;
	product[21] = 0;
        end
    else
        begin     

	// Add new value to accu
		if(forward)
		begin
		
			product[coeff_Pointer]    = ADC_Value * coeffs[coeff_Pointer];		
			accu = accu + product[coeff_Pointer];
        		Out_Filtered <= accu ;
			// Set coefficient pointer
			coeff_Pointer <= nxt_Pointer;
		
		
			
		// Set to forwards counting
			if(nxt_Pointer + 1 == 11)
			begin	
				nxt_Pointer = 10;
				
				
			end
			
			else 
				nxt_Pointer = nxt_Pointer + 1;


			// Check if counting direction needs to be reversed

			if(coeff_Pointer == 10)
			begin
				forward = 0;
				backwards = 1;
				nxt_Pointer = nxt_Pointer -1;
			end

			
		end
		else

		begin
			product[21-coeff_Pointer] = ADC_Value * coeffs[coeff_Pointer];	
			accu = accu + product[coeff_Pointer];
        		Out_Filtered <= accu ;
			// Set coefficient pointer
			coeff_Pointer <= nxt_Pointer;
		
			// Set to reverse counting
			if(nxt_Pointer - 1 == -1)
			begin	
				nxt_Pointer =  0;
			end
			else 
				nxt_Pointer = nxt_Pointer -1;

			if(coeff_Pointer == 0)
			begin
				forward = 1;
				backwards = 0;
				nxt_Pointer = nxt_Pointer + 1;
			end
		end
		
			
		
	
		// Set next Pointer
		// Forward Counting
		
		
		if(full)
		begin	

			// prepare next calculation
			accu = accu - product[nxt_Pointer];
        		
			temp_Pointer = nxt_Pointer;
		end
   
		
	end
	
		

	
end
/*
// implement product with coef 
always @(posedge CLK_Filter or posedge rst_n) begin
	if (rst_n) begin
		

	end
	else begin
		
			
	end
end
*/



endmodule

/*module multiplier(
          dataa,		// h[k]
          datab,	// x[n-k]
          result );	

output [15:0] result;
	input  [15:0] dataa;
	input  [15:0] datab;



	assign result = dataa*datab;

endmodule
*/
